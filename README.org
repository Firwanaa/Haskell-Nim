
#+TITLE: Programming in Haskell - Graham Hutton - Ch10 - Nim
#+AUTHOR: Firwanaa
#+PROPERTY: header-args :tangle code.hs
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#nim-game][Nim game:]]
- [[#imports][Imports]]
- [[#game-utilities][Game utilities:]]
  - [[#next-function][next function:]]
  - [[#board][Board]]
  - [[#valid][valid]]
  - [[#move][move]]
- [[#io-utilities][IO utilities]]
  - [[#putrow-function][putRow function]]
  - [[#putboard][putBoard]]

* Nim game:
A variant of game of name, played on a board comprising five numbered rows of stars initially set up as follows:

    1:✦✦✦✦✦
    2:✦✦✦✦
    3:✦✦✦
    4:✦✦
    4:✦

Two player in bottom-up manner, two players taking turns to remove one or more stars form the end of single row. The winner is who removes the final star.
* Imports
#+begin_src haskell
import System.IO
import Data.List
#+end_src
* Game utilities:

** next function:
For simplicity players will shown as 1 2 integers using the following function
#+begin_src hsakell
next :: Int -> Int
next 1 = 2
next 2 = 1
#+end_src
** Board
Show each row as a list.
#+begin_src haskell
type Board = [Int]

initial :: Board
initial = [5, 4, 3, 2, 1]

finished :: Board -> Bool
finished = all (== 0)
#+end_src

** valid
A move in the game is specified by a row number and the number of stars to be removed, and is valid if the row contains at this many stars.
#+begin_src haskell
valid :: Board -> Int -> Int -> Bool
valid board row num = board !! (row-1) >=num
#+end_src
** move
If valid then do the move.
#+begin_src haskell
move :: Board -> Int -> Int -> Board
move board row num = [update r n | (r,n) <- zip [1..] board]
                     where update r n = if r == row then n-num else n
                           -- update is a small function that takes two args "r" and "n"
                           -- it looks for the row number within the board
                           -- then subtract the number of stars given by the player
                           -- otherwise it will return the row value as it is "n".
#+end_src

* IO utilities
** putRow function
We start with a function that displays a row of the board on the screen, given the row number and the number of stars remaining.
#+begin_src haskell
putRow :: Int -> Int -> IO ()
putRow row num = do putStr (show row)
                    putStr ": "
                    putStrLn (concat (replicate num "✦ "))
#+end_src
** putBoard
We can use `putRow` to show the board.
#+begin_src haskell
putBoard :: Board -> IO ()
putBoard [a,b,c,d,e] = do putRow 1 a
                          putRow 2 b
                          putRow 3 c
                          putRow 4 d
                          putRow 5 e
#+end_src
